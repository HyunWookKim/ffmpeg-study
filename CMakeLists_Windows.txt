cmake_minimum_required(VERSION 3.20)
project(ffmpeg-study)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Windows specific settings for FFmpeg
if(WIN32)
    # FFmpeg installed via winget
    set(FFMPEG_ROOT "C:/Users/wise.kim/AppData/Local/Microsoft/WinGet/Packages/Gyan.FFmpeg_Microsoft.Winget.Source_8wekyb3d8bbwe/ffmpeg-7.1.1-full_build")
    set(FFMPEG_INCLUDE_DIR "${FFMPEG_ROOT}/include")
    set(FFMPEG_LIB_DIR "${FFMPEG_ROOT}/lib")
    
    # Check if include directory exists
    if(EXISTS "${FFMPEG_INCLUDE_DIR}")
        message(STATUS "Found FFmpeg include directory: ${FFMPEG_INCLUDE_DIR}")
    else()
        message(STATUS "FFmpeg include directory not found at: ${FFMPEG_INCLUDE_DIR}")
        # Try alternative locations
        if(EXISTS "${FFMPEG_ROOT}/bin")
            # This might be a binary-only installation
            message(STATUS "This appears to be a binary-only FFmpeg installation")
            message(STATUS "You may need to download the dev package with headers and libraries")
        endif()
    endif()
    
    include_directories(${FFMPEG_INCLUDE_DIR})
    link_directories(${FFMPEG_LIB_DIR})
    
    # Windows FFmpeg libraries
    set(FFMPEG_LIBRARIES
        avformat
        avcodec
        avutil
        swscale
        swresample
        avfilter
    )
elseif(APPLE AND CMAKE_SYSTEM_PROCESSOR STREQUAL "arm64")
    # Homebrew ARM64 path for Apple Silicon
    set(CMAKE_PREFIX_PATH "/opt/homebrew" ${CMAKE_PREFIX_PATH})
    include_directories("/opt/homebrew/include")
    link_directories("/opt/homebrew/lib")
    
    # Find FFmpeg libraries using pkg-config on macOS
    find_package(PkgConfig REQUIRED)
    pkg_check_modules(FFMPEG REQUIRED 
        libavformat 
        libavcodec 
        libavutil 
        libswscale 
        libswresample
        libavfilter
    )
    
    set(FFMPEG_LIBRARIES ${FFMPEG_LIBRARIES})
else()
    # Linux or other systems
    find_package(PkgConfig REQUIRED)
    pkg_check_modules(FFMPEG REQUIRED 
        libavformat 
        libavcodec 
        libavutil 
        libswscale 
        libswresample
        libavfilter
    )
    
    set(FFMPEG_LIBRARIES ${FFMPEG_LIBRARIES})
endif()

# Find SDL2 for GUI video player (optional)
find_package(SDL2 QUIET)

# Create main executable
add_executable(ffmpeg-info src/ffmpeg_info.cpp)
target_link_libraries(ffmpeg-info ${FFMPEG_LIBRARIES})

# Create video analysis example
add_executable(video-analysis examples/video_analysis.cpp)
target_link_libraries(video-analysis ${FFMPEG_LIBRARIES})

# Create frame extraction example
add_executable(frame-extract examples/frame_extraction.cpp)
target_link_libraries(frame-extract ${FFMPEG_LIBRARIES})

# Create simple encoder example
add_executable(simple-encoder examples/simple_encoder.cpp)
target_link_libraries(simple-encoder ${FFMPEG_LIBRARIES})

# === Advanced Examples ===

# Hardware accelerated decoder (for Windows, this will use software decoding)
add_executable(hardware-decoder examples/advanced/hardware_decoder.cpp)
target_link_libraries(hardware-decoder ${FFMPEG_LIBRARIES})

# Advanced video filter processor
add_executable(video-filter examples/advanced/video_filter.cpp)
target_link_libraries(video-filter ${FFMPEG_LIBRARIES})

# RTMP live streamer
add_executable(rtmp-streamer examples/advanced/rtmp_streamer.cpp)
target_link_libraries(rtmp-streamer ${FFMPEG_LIBRARIES})

# Hardware accelerated video player
add_executable(video-player examples/advanced/video_player.cpp)
target_link_libraries(video-player ${FFMPEG_LIBRARIES})

# GUI video player with SDL2 (if available)
if(SDL2_FOUND)
    add_executable(gui-video-player examples/advanced/gui_video_player.cpp)
    target_link_libraries(gui-video-player ${FFMPEG_LIBRARIES} ${SDL2_LIBRARIES})
    message(STATUS "✅ GUI 비디오 플레이어가 빌드에 포함됩니다 (SDL2 발견)")
else()
    message(STATUS "⚠️  SDL2를 찾을 수 없어 GUI 플레이어가 제외됩니다.")
endif()

# Set compiler flags for better debugging
set(CMAKE_BUILD_TYPE Debug)
if(MSVC)
    set(CMAKE_CXX_FLAGS_DEBUG "/Zi /Od")
else()
    set(CMAKE_CXX_FLAGS_DEBUG "-g -O0")
endif()
